{"ast":null,"code":"import { configureStore, createSlice } from \"@reduxjs/toolkit\";\nconst uiSlice = createSlice({\n  name: \"ui\",\n  initialState: {\n    cartIsVisible: false,\n    notification: null\n  },\n  reducers: {\n    toggleCart: state => ({\n      cartIsVisible: !state.cartIsVisible\n    }),\n    showNotification: (state, action) => {\n      state.notification = action.payload.status;\n    }\n  }\n});\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0\n    // totalAmount: 0,\n  },\n  reducers: {\n    addItemToCart: (state, action) => {\n      // console.log(action.payload);\n      const itemToAdd = action.payload;\n      const existingItem = state.items.find(item => item.id === itemToAdd.id);\n      state.totalQuantity += 1;\n      if (!existingItem) state.items.push({\n        id: itemToAdd.id,\n        // Fixed\n        name: itemToAdd.title,\n        // Fixed\n        price: itemToAdd.price,\n        // Fixed\n        quantity: 1,\n        // Dynamic\n        totalPrice: itemToAdd.price // Dynamic\n      });else {\n        existingItem.quantity += 1;\n        existingItem.totalPrice += existingItem.price;\n      }\n    },\n    removeItemFromCart: (state, action) => {\n      const itemId = action.payload;\n      const existingItem = state.items.find(item => item.id === itemId);\n      state.totalQuantity -= 1;\n      if (existingItem.quantity === 1) state.items.splice(state.items.indexOf(existingItem), 1);else {\n        existingItem.quantity -= 1;\n        existingItem.totalPrice -= existingItem.price;\n      }\n    }\n  }\n});\nconst store = configureStore({\n  reducer: {\n    ui: uiSlice.reducer,\n    cart: cartSlice.reducer\n  }\n});\nexport const uiActions = uiSlice.actions;\nexport const cartActions = cartSlice.actions;\nexport default store;","map":{"version":3,"names":["configureStore","createSlice","uiSlice","name","initialState","cartIsVisible","notification","reducers","toggleCart","state","showNotification","action","payload","status","cartSlice","items","totalQuantity","addItemToCart","itemToAdd","existingItem","find","item","id","push","title","price","quantity","totalPrice","removeItemFromCart","itemId","splice","indexOf","store","reducer","ui","cart","uiActions","actions","cartActions"],"sources":["/Users/ankush/Library/CloudStorage/OneDrive-Personal/Dev/Academind/React/13-Advanced-Redux/src/store/index.js"],"sourcesContent":["import { configureStore, createSlice } from \"@reduxjs/toolkit\";\n\nconst uiSlice = createSlice({\n  name: \"ui\",\n  initialState: { cartIsVisible: false, notification: null },\n  reducers: {\n    toggleCart: (state) => ({ cartIsVisible: !state.cartIsVisible }),\n    showNotification: (state, action) => {\n      state.notification = action.payload.status;\n    },\n  },\n});\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    // totalAmount: 0,\n  },\n  reducers: {\n    addItemToCart: (state, action) => {\n      // console.log(action.payload);\n      const itemToAdd = action.payload;\n      const existingItem = state.items.find((item) => item.id === itemToAdd.id);\n      state.totalQuantity += 1;\n      if (!existingItem)\n        state.items.push({\n          id: itemToAdd.id, // Fixed\n          name: itemToAdd.title, // Fixed\n          price: itemToAdd.price, // Fixed\n          quantity: 1, // Dynamic\n          totalPrice: itemToAdd.price, // Dynamic\n        });\n      else {\n        existingItem.quantity += 1;\n        existingItem.totalPrice += existingItem.price;\n      }\n    },\n    removeItemFromCart: (state, action) => {\n      const itemId = action.payload;\n      const existingItem = state.items.find((item) => item.id === itemId);\n      state.totalQuantity -= 1;\n      if (existingItem.quantity === 1) state.items.splice(state.items.indexOf(existingItem), 1);\n      else {\n        existingItem.quantity -= 1;\n        existingItem.totalPrice -= existingItem.price;\n      }\n    },\n  },\n});\n\nconst store = configureStore({\n  reducer: {\n    ui: uiSlice.reducer,\n    cart: cartSlice.reducer,\n  },\n});\n\nexport const uiActions = uiSlice.actions;\nexport const cartActions = cartSlice.actions;\nexport default store;\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,WAAW,QAAQ,kBAAkB;AAE9D,MAAMC,OAAO,GAAGD,WAAW,CAAC;EAC1BE,IAAI,EAAE,IAAI;EACVC,YAAY,EAAE;IAAEC,aAAa,EAAE,KAAK;IAAEC,YAAY,EAAE;EAAK,CAAC;EAC1DC,QAAQ,EAAE;IACRC,UAAU,EAAGC,KAAK,KAAM;MAAEJ,aAAa,EAAE,CAACI,KAAK,CAACJ;IAAc,CAAC,CAAC;IAChEK,gBAAgB,EAAEA,CAACD,KAAK,EAAEE,MAAM,KAAK;MACnCF,KAAK,CAACH,YAAY,GAAGK,MAAM,CAACC,OAAO,CAACC,MAAM;IAC5C;EACF;AACF,CAAC,CAAC;AAEF,MAAMC,SAAS,GAAGb,WAAW,CAAC;EAC5BE,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZW,KAAK,EAAE,EAAE;IACTC,aAAa,EAAE;IACf;EACF,CAAC;EACDT,QAAQ,EAAE;IACRU,aAAa,EAAEA,CAACR,KAAK,EAAEE,MAAM,KAAK;MAChC;MACA,MAAMO,SAAS,GAAGP,MAAM,CAACC,OAAO;MAChC,MAAMO,YAAY,GAAGV,KAAK,CAACM,KAAK,CAACK,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,SAAS,CAACI,EAAE,CAAC;MACzEb,KAAK,CAACO,aAAa,IAAI,CAAC;MACxB,IAAI,CAACG,YAAY,EACfV,KAAK,CAACM,KAAK,CAACQ,IAAI,CAAC;QACfD,EAAE,EAAEJ,SAAS,CAACI,EAAE;QAAE;QAClBnB,IAAI,EAAEe,SAAS,CAACM,KAAK;QAAE;QACvBC,KAAK,EAAEP,SAAS,CAACO,KAAK;QAAE;QACxBC,QAAQ,EAAE,CAAC;QAAE;QACbC,UAAU,EAAET,SAAS,CAACO,KAAK,CAAE;MAC/B,CAAC,CAAC,CAAC,KACA;QACHN,YAAY,CAACO,QAAQ,IAAI,CAAC;QAC1BP,YAAY,CAACQ,UAAU,IAAIR,YAAY,CAACM,KAAK;MAC/C;IACF,CAAC;IACDG,kBAAkB,EAAEA,CAACnB,KAAK,EAAEE,MAAM,KAAK;MACrC,MAAMkB,MAAM,GAAGlB,MAAM,CAACC,OAAO;MAC7B,MAAMO,YAAY,GAAGV,KAAK,CAACM,KAAK,CAACK,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKO,MAAM,CAAC;MACnEpB,KAAK,CAACO,aAAa,IAAI,CAAC;MACxB,IAAIG,YAAY,CAACO,QAAQ,KAAK,CAAC,EAAEjB,KAAK,CAACM,KAAK,CAACe,MAAM,CAACrB,KAAK,CAACM,KAAK,CAACgB,OAAO,CAACZ,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC,KACrF;QACHA,YAAY,CAACO,QAAQ,IAAI,CAAC;QAC1BP,YAAY,CAACQ,UAAU,IAAIR,YAAY,CAACM,KAAK;MAC/C;IACF;EACF;AACF,CAAC,CAAC;AAEF,MAAMO,KAAK,GAAGhC,cAAc,CAAC;EAC3BiC,OAAO,EAAE;IACPC,EAAE,EAAEhC,OAAO,CAAC+B,OAAO;IACnBE,IAAI,EAAErB,SAAS,CAACmB;EAClB;AACF,CAAC,CAAC;AAEF,OAAO,MAAMG,SAAS,GAAGlC,OAAO,CAACmC,OAAO;AACxC,OAAO,MAAMC,WAAW,GAAGxB,SAAS,CAACuB,OAAO;AAC5C,eAAeL,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}