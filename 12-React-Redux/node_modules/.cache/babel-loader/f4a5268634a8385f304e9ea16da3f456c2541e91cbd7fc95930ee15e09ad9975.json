{"ast":null,"code":"// import * as redux from \"redux\";\n// import { createStore } from \"redux\";\nimport { configureStore, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\n\n/*\n// NOTE: Without using redux toolkit:\nconst counterReducer = (state = initialState, action) => {\n  if (action.type === \"inc\") return { counter: state.counter + 1, showCounter: state.showCounter };\n  else if (action.type === \"dec\") return { counter: state.counter - 1, showCounter: state.showCounter };\n  else if (action.type === \"increase\")\n    return { counter: state.counter + action.amount, showCounter: state.showCounter };\n  else if (action.type === \"toggle\") return { ...state, showCounter: !state.showCounter };\n  return state; // No changes if no match\n};\n\nconst store = createStore(counterReducer);\n*/\n\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    increment: state => {\n      state.counter++;\n    },\n    decrement: state => {\n      state.counter--;\n    },\n    increase: (state, action) => state.counter + action.amount,\n    toggleCounter: state => state.showCounter = !state.showCounter\n  }\n});\n\n// If there's only one reducer in the entire application:\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\n// For multiple reducers, specify as follows and configureStore will merge all reducers:\n// const store = configureStore({ reducer: { counter: counterSlice.reducer } });\nexport const counterActions = counterSlice.actions; // to be used in Counter.js\nexport default store; // To be used in <Provider> (index.js)","map":{"version":3,"names":["configureStore","createSlice","initialState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","amount","toggleCounter","store","reducer","counterActions","actions"],"sources":["/Users/ankush/Library/CloudStorage/OneDrive-Personal/Dev/Academind/React/12-React-Redux/src/store/index.js"],"sourcesContent":["// import * as redux from \"redux\";\n// import { createStore } from \"redux\";\nimport { configureStore, createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = { counter: 0, showCounter: true };\n\n/*\n// NOTE: Without using redux toolkit:\nconst counterReducer = (state = initialState, action) => {\n  if (action.type === \"inc\") return { counter: state.counter + 1, showCounter: state.showCounter };\n  else if (action.type === \"dec\") return { counter: state.counter - 1, showCounter: state.showCounter };\n  else if (action.type === \"increase\")\n    return { counter: state.counter + action.amount, showCounter: state.showCounter };\n  else if (action.type === \"toggle\") return { ...state, showCounter: !state.showCounter };\n  return state; // No changes if no match\n};\n\nconst store = createStore(counterReducer);\n*/\n\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    increment: (state) => {\n      state.counter++;\n    },\n    decrement: (state) => {\n      state.counter--;\n    },\n    increase: (state, action) => state.counter + action.amount,\n    toggleCounter: (state) => (state.showCounter = !state.showCounter),\n  },\n});\n\n// If there's only one reducer in the entire application:\nconst store = configureStore({ reducer: counterSlice.reducer });\n// For multiple reducers, specify as follows and configureStore will merge all reducers:\n// const store = configureStore({ reducer: { counter: counterSlice.reducer } });\nexport const counterActions = counterSlice.actions; // to be used in Counter.js\nexport default store; // To be used in <Provider> (index.js)\n"],"mappings":"AAAA;AACA;AACA,SAASA,cAAc,EAAEC,WAAW,QAAQ,kBAAkB;AAE9D,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAGJ,WAAW,CAAC;EAC/BK,IAAI,EAAE,SAAS;EACfJ,YAAY;EACZK,QAAQ,EAAE;IACRC,SAAS,EAAGC,KAAK,IAAK;MACpBA,KAAK,CAACN,OAAO,EAAE;IACjB,CAAC;IACDO,SAAS,EAAGD,KAAK,IAAK;MACpBA,KAAK,CAACN,OAAO,EAAE;IACjB,CAAC;IACDQ,QAAQ,EAAEA,CAACF,KAAK,EAAEG,MAAM,KAAKH,KAAK,CAACN,OAAO,GAAGS,MAAM,CAACC,MAAM;IAC1DC,aAAa,EAAGL,KAAK,IAAMA,KAAK,CAACL,WAAW,GAAG,CAACK,KAAK,CAACL;EACxD;AACF,CAAC,CAAC;;AAEF;AACA,MAAMW,KAAK,GAAGf,cAAc,CAAC;EAAEgB,OAAO,EAAEX,YAAY,CAACW;AAAQ,CAAC,CAAC;AAC/D;AACA;AACA,OAAO,MAAMC,cAAc,GAAGZ,YAAY,CAACa,OAAO,CAAC,CAAC;AACpD,eAAeH,KAAK,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}